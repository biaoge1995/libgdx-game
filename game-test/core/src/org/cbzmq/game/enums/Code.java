// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avro/enums.proto

package org.cbzmq.game.enums;

/**
 * Protobuf enum {@code Code}
 *
 * <pre>
 *消息状态
 * </pre>
 */
public enum Code
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>OK = 200;</code>
   *
   * <pre>
   *成功
   * </pre>
   */
  OK(0, 200),
  /**
   * <code>SERVER_FAILED = 500;</code>
   *
   * <pre>
   *服务器异常
   * </pre>
   */
  SERVER_FAILED(1, 500),
  ;

  /**
   * <code>OK = 200;</code>
   *
   * <pre>
   *成功
   * </pre>
   */
  public static final int OK_VALUE = 200;
  /**
   * <code>SERVER_FAILED = 500;</code>
   *
   * <pre>
   *服务器异常
   * </pre>
   */
  public static final int SERVER_FAILED_VALUE = 500;


  public final int getNumber() { return value; }

  public static Code valueOf(int value) {
    switch (value) {
      case 200: return OK;
      case 500: return SERVER_FAILED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Code>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static com.google.protobuf.Internal.EnumLiteMap<Code>
      internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Code>() {
          public Code findValueByNumber(int number) {
            return Code.valueOf(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(index);
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.cbzmq.game.enums.Enums.getDescriptor().getEnumTypes().get(6);
  }

  private static final Code[] VALUES = values();

  public static Code valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int index;
  private final int value;

  private Code(int index, int value) {
    this.index = index;
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:Code)
}

