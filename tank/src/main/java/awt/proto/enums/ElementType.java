// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

package awt.proto.enums;

/**
 * Protobuf enum {@code ElementType}
 *
 * <pre>
 *元素类型
 * </pre>
 */
public enum ElementType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>TANK = 0;</code>
   *
   * <pre>
   *枚举
   * </pre>
   */
  TANK(0, 0),
  /**
   * <code>BULLET = 1;</code>
   *
   * <pre>
   *子弹
   * </pre>
   */
  BULLET(1, 1),
  /**
   * <code>WALL = 2;</code>
   *
   * <pre>
   *墙
   * </pre>
   */
  WALL(2, 2),
  /**
   * <code>RIVER = 3;</code>
   *
   * <pre>
   *河
   * </pre>
   */
  RIVER(3, 3),
  /**
   * <code>GRASS_LAND = 4;</code>
   *
   * <pre>
   * 草地
   * </pre>
   */
  GRASS_LAND(4, 4),
  ;

  /**
   * <code>TANK = 0;</code>
   *
   * <pre>
   *枚举
   * </pre>
   */
  public static final int TANK_VALUE = 0;
  /**
   * <code>BULLET = 1;</code>
   *
   * <pre>
   *子弹
   * </pre>
   */
  public static final int BULLET_VALUE = 1;
  /**
   * <code>WALL = 2;</code>
   *
   * <pre>
   *墙
   * </pre>
   */
  public static final int WALL_VALUE = 2;
  /**
   * <code>RIVER = 3;</code>
   *
   * <pre>
   *河
   * </pre>
   */
  public static final int RIVER_VALUE = 3;
  /**
   * <code>GRASS_LAND = 4;</code>
   *
   * <pre>
   * 草地
   * </pre>
   */
  public static final int GRASS_LAND_VALUE = 4;


  public final int getNumber() { return value; }

  public static ElementType valueOf(int value) {
    switch (value) {
      case 0: return TANK;
      case 1: return BULLET;
      case 2: return WALL;
      case 3: return RIVER;
      case 4: return GRASS_LAND;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ElementType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static com.google.protobuf.Internal.EnumLiteMap<ElementType>
      internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ElementType>() {
          public ElementType findValueByNumber(int number) {
            return ElementType.valueOf(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(index);
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return awt.proto.enums.Enums.getDescriptor().getEnumTypes().get(6);
  }

  private static final ElementType[] VALUES = values();

  public static ElementType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int index;
  private final int value;

  private ElementType(int index, int value) {
    this.index = index;
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:ElementType)
}

