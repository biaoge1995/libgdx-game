// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: element.proto

package awt.proto;

/**
 * Protobuf type {@code Element}
 */
public  final class Element extends
    com.google.protobuf.GeneratedMessage
    implements ElementOrBuilder {
  // Use Element.newBuilder() to construct.
  private Element(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private Element(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final Element defaultInstance;
  public static Element getDefaultInstance() {
    return defaultInstance;
  }

  public Element getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final com.google.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private Element(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            playerId_ = input.readInt32();
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            awt.proto.enums.ElementType value = awt.proto.enums.ElementType.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(2, rawValue);
            } else {
              bitField0_ |= 0x00000002;
              elementType_ = value;
            }
            break;
          }
          case 24: {
            bitField0_ |= 0x00000004;
            xCoordinate_ = input.readInt32();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000008;
            yCoordinate_ = input.readInt32();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000010;
            mapXCoordinate_ = input.readInt32();
            break;
          }
          case 48: {
            bitField0_ |= 0x00000020;
            mapYCoordinate_ = input.readInt32();
            break;
          }
          case 56: {
            int rawValue = input.readEnum();
            awt.proto.enums.Direct value = awt.proto.enums.Direct.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(7, rawValue);
            } else {
              bitField0_ |= 0x00000040;
              direct_ = value;
            }
            break;
          }
          case 64: {
            bitField0_ |= 0x00000080;
            isMoved_ = input.readBool();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000100;
            isLive_ = input.readBool();
            break;
          }
          case 80: {
            bitField0_ |= 0x00000200;
            blood_ = input.readInt32();
            break;
          }
          case 88: {
            bitField0_ |= 0x00000400;
            increaseId_ = input.readInt32();
            break;
          }
          case 96: {
            bitField0_ |= 0x00000800;
            distance_ = input.readInt32();
            break;
          }
          case 104: {
            int rawValue = input.readEnum();
            awt.proto.enums.Direct value = awt.proto.enums.Direct.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(13, rawValue);
            } else {
              bitField0_ |= 0x00001000;
              canMoveDirect_ = value;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return awt.proto.ElementProto.internal_static_Element_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return awt.proto.ElementProto.internal_static_Element_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            awt.proto.Element.class, awt.proto.Element.Builder.class);
  }

  public static com.google.protobuf.Parser<Element> PARSER =
      new com.google.protobuf.AbstractParser<Element>() {
    public Element parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Element(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<Element> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  // optional int32 playerId = 1;
  public static final int PLAYERID_FIELD_NUMBER = 1;
  private int playerId_;
  /**
   * <code>optional int32 playerId = 1;</code>
   *
   * <pre>
   *游戏玩家id
   * </pre>
   */
  public boolean hasPlayerId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional int32 playerId = 1;</code>
   *
   * <pre>
   *游戏玩家id
   * </pre>
   */
  public int getPlayerId() {
    return playerId_;
  }

  // optional .ElementType elementType = 2;
  public static final int ELEMENTTYPE_FIELD_NUMBER = 2;
  private awt.proto.enums.ElementType elementType_;
  /**
   * <code>optional .ElementType elementType = 2;</code>
   */
  public boolean hasElementType() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional .ElementType elementType = 2;</code>
   */
  public awt.proto.enums.ElementType getElementType() {
    return elementType_;
  }

  // optional int32 xCoordinate = 3;
  public static final int XCOORDINATE_FIELD_NUMBER = 3;
  private int xCoordinate_;
  /**
   * <code>optional int32 xCoordinate = 3;</code>
   *
   * <pre>
   * 物体中心位置在窗口的X坐标
   * </pre>
   */
  public boolean hasXCoordinate() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional int32 xCoordinate = 3;</code>
   *
   * <pre>
   * 物体中心位置在窗口的X坐标
   * </pre>
   */
  public int getXCoordinate() {
    return xCoordinate_;
  }

  // optional int32 yCoordinate = 4;
  public static final int YCOORDINATE_FIELD_NUMBER = 4;
  private int yCoordinate_;
  /**
   * <code>optional int32 yCoordinate = 4;</code>
   *
   * <pre>
   * 物体中心位置在窗口的Y坐标
   * </pre>
   */
  public boolean hasYCoordinate() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional int32 yCoordinate = 4;</code>
   *
   * <pre>
   * 物体中心位置在窗口的Y坐标
   * </pre>
   */
  public int getYCoordinate() {
    return yCoordinate_;
  }

  // optional int32 mapXCoordinate = 5;
  public static final int MAPXCOORDINATE_FIELD_NUMBER = 5;
  private int mapXCoordinate_;
  /**
   * <code>optional int32 mapXCoordinate = 5;</code>
   *
   * <pre>
   * 物体中心位置地图中的X坐标
   * </pre>
   */
  public boolean hasMapXCoordinate() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional int32 mapXCoordinate = 5;</code>
   *
   * <pre>
   * 物体中心位置地图中的X坐标
   * </pre>
   */
  public int getMapXCoordinate() {
    return mapXCoordinate_;
  }

  // optional int32 mapYCoordinate = 6;
  public static final int MAPYCOORDINATE_FIELD_NUMBER = 6;
  private int mapYCoordinate_;
  /**
   * <code>optional int32 mapYCoordinate = 6;</code>
   *
   * <pre>
   * 物体中心位置地图中的的Y坐标
   * </pre>
   */
  public boolean hasMapYCoordinate() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional int32 mapYCoordinate = 6;</code>
   *
   * <pre>
   * 物体中心位置地图中的的Y坐标
   * </pre>
   */
  public int getMapYCoordinate() {
    return mapYCoordinate_;
  }

  // optional .Direct direct = 7;
  public static final int DIRECT_FIELD_NUMBER = 7;
  private awt.proto.enums.Direct direct_;
  /**
   * <code>optional .Direct direct = 7;</code>
   */
  public boolean hasDirect() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>optional .Direct direct = 7;</code>
   */
  public awt.proto.enums.Direct getDirect() {
    return direct_;
  }

  // optional bool isMoved = 8;
  public static final int ISMOVED_FIELD_NUMBER = 8;
  private boolean isMoved_;
  /**
   * <code>optional bool isMoved = 8;</code>
   *
   * <pre>
   *是否处于移动状态
   * </pre>
   */
  public boolean hasIsMoved() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional bool isMoved = 8;</code>
   *
   * <pre>
   *是否处于移动状态
   * </pre>
   */
  public boolean getIsMoved() {
    return isMoved_;
  }

  // required bool isLive = 9;
  public static final int ISLIVE_FIELD_NUMBER = 9;
  private boolean isLive_;
  /**
   * <code>required bool isLive = 9;</code>
   *
   * <pre>
   *是否存活
   * </pre>
   */
  public boolean hasIsLive() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>required bool isLive = 9;</code>
   *
   * <pre>
   *是否存活
   * </pre>
   */
  public boolean getIsLive() {
    return isLive_;
  }

  // optional int32 blood = 10;
  public static final int BLOOD_FIELD_NUMBER = 10;
  private int blood_;
  /**
   * <code>optional int32 blood = 10;</code>
   *
   * <pre>
   *当前血条
   * </pre>
   */
  public boolean hasBlood() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>optional int32 blood = 10;</code>
   *
   * <pre>
   *当前血条
   * </pre>
   */
  public int getBlood() {
    return blood_;
  }

  // required int32 increaseId = 11;
  public static final int INCREASEID_FIELD_NUMBER = 11;
  private int increaseId_;
  /**
   * <code>required int32 increaseId = 11;</code>
   *
   * <pre>
   *自增id
   * </pre>
   */
  public boolean hasIncreaseId() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <code>required int32 increaseId = 11;</code>
   *
   * <pre>
   *自增id
   * </pre>
   */
  public int getIncreaseId() {
    return increaseId_;
  }

  // optional int32 distance = 12;
  public static final int DISTANCE_FIELD_NUMBER = 12;
  private int distance_;
  /**
   * <code>optional int32 distance = 12;</code>
   *
   * <pre>
   *已走射程计数器
   * </pre>
   */
  public boolean hasDistance() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <code>optional int32 distance = 12;</code>
   *
   * <pre>
   *已走射程计数器
   * </pre>
   */
  public int getDistance() {
    return distance_;
  }

  // optional .Direct canMoveDirect = 13;
  public static final int CANMOVEDIRECT_FIELD_NUMBER = 13;
  private awt.proto.enums.Direct canMoveDirect_;
  /**
   * <code>optional .Direct canMoveDirect = 13;</code>
   *
   * <pre>
   *多个方向
   * </pre>
   */
  public boolean hasCanMoveDirect() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <code>optional .Direct canMoveDirect = 13;</code>
   *
   * <pre>
   *多个方向
   * </pre>
   */
  public awt.proto.enums.Direct getCanMoveDirect() {
    return canMoveDirect_;
  }

  private void initFields() {
    playerId_ = 0;
    elementType_ = awt.proto.enums.ElementType.TANK;
    xCoordinate_ = 0;
    yCoordinate_ = 0;
    mapXCoordinate_ = 0;
    mapYCoordinate_ = 0;
    direct_ = awt.proto.enums.Direct.UP;
    isMoved_ = false;
    isLive_ = false;
    blood_ = 0;
    increaseId_ = 0;
    distance_ = 0;
    canMoveDirect_ = awt.proto.enums.Direct.UP;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized != -1) return isInitialized == 1;

    if (!hasIsLive()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIncreaseId()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, playerId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeEnum(2, elementType_.getNumber());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, xCoordinate_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(4, yCoordinate_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt32(5, mapXCoordinate_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeInt32(6, mapYCoordinate_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeEnum(7, direct_.getNumber());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeBool(8, isMoved_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeBool(9, isLive_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeInt32(10, blood_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeInt32(11, increaseId_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeInt32(12, distance_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeEnum(13, canMoveDirect_.getNumber());
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, playerId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, elementType_.getNumber());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, xCoordinate_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, yCoordinate_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, mapXCoordinate_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, mapYCoordinate_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, direct_.getNumber());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, isMoved_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, isLive_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(10, blood_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(11, increaseId_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(12, distance_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(13, canMoveDirect_.getNumber());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static awt.proto.Element parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static awt.proto.Element parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static awt.proto.Element parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static awt.proto.Element parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static awt.proto.Element parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static awt.proto.Element parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static awt.proto.Element parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static awt.proto.Element parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static awt.proto.Element parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static awt.proto.Element parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(awt.proto.Element prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code Element}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder>
     implements awt.proto.ElementOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return awt.proto.ElementProto.internal_static_Element_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return awt.proto.ElementProto.internal_static_Element_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              awt.proto.Element.class, awt.proto.Element.Builder.class);
    }

    // Construct using awt.proto.Element.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      playerId_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      elementType_ = awt.proto.enums.ElementType.TANK;
      bitField0_ = (bitField0_ & ~0x00000002);
      xCoordinate_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      yCoordinate_ = 0;
      bitField0_ = (bitField0_ & ~0x00000008);
      mapXCoordinate_ = 0;
      bitField0_ = (bitField0_ & ~0x00000010);
      mapYCoordinate_ = 0;
      bitField0_ = (bitField0_ & ~0x00000020);
      direct_ = awt.proto.enums.Direct.UP;
      bitField0_ = (bitField0_ & ~0x00000040);
      isMoved_ = false;
      bitField0_ = (bitField0_ & ~0x00000080);
      isLive_ = false;
      bitField0_ = (bitField0_ & ~0x00000100);
      blood_ = 0;
      bitField0_ = (bitField0_ & ~0x00000200);
      increaseId_ = 0;
      bitField0_ = (bitField0_ & ~0x00000400);
      distance_ = 0;
      bitField0_ = (bitField0_ & ~0x00000800);
      canMoveDirect_ = awt.proto.enums.Direct.UP;
      bitField0_ = (bitField0_ & ~0x00001000);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return awt.proto.ElementProto.internal_static_Element_descriptor;
    }

    public awt.proto.Element getDefaultInstanceForType() {
      return awt.proto.Element.getDefaultInstance();
    }

    public awt.proto.Element build() {
      awt.proto.Element result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public awt.proto.Element buildPartial() {
      awt.proto.Element result = new awt.proto.Element(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.playerId_ = playerId_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.elementType_ = elementType_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.xCoordinate_ = xCoordinate_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.yCoordinate_ = yCoordinate_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.mapXCoordinate_ = mapXCoordinate_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.mapYCoordinate_ = mapYCoordinate_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.direct_ = direct_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.isMoved_ = isMoved_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.isLive_ = isLive_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      result.blood_ = blood_;
      if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
        to_bitField0_ |= 0x00000400;
      }
      result.increaseId_ = increaseId_;
      if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
        to_bitField0_ |= 0x00000800;
      }
      result.distance_ = distance_;
      if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
        to_bitField0_ |= 0x00001000;
      }
      result.canMoveDirect_ = canMoveDirect_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof awt.proto.Element) {
        return mergeFrom((awt.proto.Element)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(awt.proto.Element other) {
      if (other == awt.proto.Element.getDefaultInstance()) return this;
      if (other.hasPlayerId()) {
        setPlayerId(other.getPlayerId());
      }
      if (other.hasElementType()) {
        setElementType(other.getElementType());
      }
      if (other.hasXCoordinate()) {
        setXCoordinate(other.getXCoordinate());
      }
      if (other.hasYCoordinate()) {
        setYCoordinate(other.getYCoordinate());
      }
      if (other.hasMapXCoordinate()) {
        setMapXCoordinate(other.getMapXCoordinate());
      }
      if (other.hasMapYCoordinate()) {
        setMapYCoordinate(other.getMapYCoordinate());
      }
      if (other.hasDirect()) {
        setDirect(other.getDirect());
      }
      if (other.hasIsMoved()) {
        setIsMoved(other.getIsMoved());
      }
      if (other.hasIsLive()) {
        setIsLive(other.getIsLive());
      }
      if (other.hasBlood()) {
        setBlood(other.getBlood());
      }
      if (other.hasIncreaseId()) {
        setIncreaseId(other.getIncreaseId());
      }
      if (other.hasDistance()) {
        setDistance(other.getDistance());
      }
      if (other.hasCanMoveDirect()) {
        setCanMoveDirect(other.getCanMoveDirect());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      if (!hasIsLive()) {
        
        return false;
      }
      if (!hasIncreaseId()) {
        
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      awt.proto.Element parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (awt.proto.Element) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    // optional int32 playerId = 1;
    private int playerId_ ;
    /**
     * <code>optional int32 playerId = 1;</code>
     *
     * <pre>
     *游戏玩家id
     * </pre>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 playerId = 1;</code>
     *
     * <pre>
     *游戏玩家id
     * </pre>
     */
    public int getPlayerId() {
      return playerId_;
    }
    /**
     * <code>optional int32 playerId = 1;</code>
     *
     * <pre>
     *游戏玩家id
     * </pre>
     */
    public Builder setPlayerId(int value) {
      bitField0_ |= 0x00000001;
      playerId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 playerId = 1;</code>
     *
     * <pre>
     *游戏玩家id
     * </pre>
     */
    public Builder clearPlayerId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      playerId_ = 0;
      onChanged();
      return this;
    }

    // optional .ElementType elementType = 2;
    private awt.proto.enums.ElementType elementType_ = awt.proto.enums.ElementType.TANK;
    /**
     * <code>optional .ElementType elementType = 2;</code>
     */
    public boolean hasElementType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .ElementType elementType = 2;</code>
     */
    public awt.proto.enums.ElementType getElementType() {
      return elementType_;
    }
    /**
     * <code>optional .ElementType elementType = 2;</code>
     */
    public Builder setElementType(awt.proto.enums.ElementType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      elementType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .ElementType elementType = 2;</code>
     */
    public Builder clearElementType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      elementType_ = awt.proto.enums.ElementType.TANK;
      onChanged();
      return this;
    }

    // optional int32 xCoordinate = 3;
    private int xCoordinate_ ;
    /**
     * <code>optional int32 xCoordinate = 3;</code>
     *
     * <pre>
     * 物体中心位置在窗口的X坐标
     * </pre>
     */
    public boolean hasXCoordinate() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 xCoordinate = 3;</code>
     *
     * <pre>
     * 物体中心位置在窗口的X坐标
     * </pre>
     */
    public int getXCoordinate() {
      return xCoordinate_;
    }
    /**
     * <code>optional int32 xCoordinate = 3;</code>
     *
     * <pre>
     * 物体中心位置在窗口的X坐标
     * </pre>
     */
    public Builder setXCoordinate(int value) {
      bitField0_ |= 0x00000004;
      xCoordinate_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 xCoordinate = 3;</code>
     *
     * <pre>
     * 物体中心位置在窗口的X坐标
     * </pre>
     */
    public Builder clearXCoordinate() {
      bitField0_ = (bitField0_ & ~0x00000004);
      xCoordinate_ = 0;
      onChanged();
      return this;
    }

    // optional int32 yCoordinate = 4;
    private int yCoordinate_ ;
    /**
     * <code>optional int32 yCoordinate = 4;</code>
     *
     * <pre>
     * 物体中心位置在窗口的Y坐标
     * </pre>
     */
    public boolean hasYCoordinate() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 yCoordinate = 4;</code>
     *
     * <pre>
     * 物体中心位置在窗口的Y坐标
     * </pre>
     */
    public int getYCoordinate() {
      return yCoordinate_;
    }
    /**
     * <code>optional int32 yCoordinate = 4;</code>
     *
     * <pre>
     * 物体中心位置在窗口的Y坐标
     * </pre>
     */
    public Builder setYCoordinate(int value) {
      bitField0_ |= 0x00000008;
      yCoordinate_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 yCoordinate = 4;</code>
     *
     * <pre>
     * 物体中心位置在窗口的Y坐标
     * </pre>
     */
    public Builder clearYCoordinate() {
      bitField0_ = (bitField0_ & ~0x00000008);
      yCoordinate_ = 0;
      onChanged();
      return this;
    }

    // optional int32 mapXCoordinate = 5;
    private int mapXCoordinate_ ;
    /**
     * <code>optional int32 mapXCoordinate = 5;</code>
     *
     * <pre>
     * 物体中心位置地图中的X坐标
     * </pre>
     */
    public boolean hasMapXCoordinate() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 mapXCoordinate = 5;</code>
     *
     * <pre>
     * 物体中心位置地图中的X坐标
     * </pre>
     */
    public int getMapXCoordinate() {
      return mapXCoordinate_;
    }
    /**
     * <code>optional int32 mapXCoordinate = 5;</code>
     *
     * <pre>
     * 物体中心位置地图中的X坐标
     * </pre>
     */
    public Builder setMapXCoordinate(int value) {
      bitField0_ |= 0x00000010;
      mapXCoordinate_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 mapXCoordinate = 5;</code>
     *
     * <pre>
     * 物体中心位置地图中的X坐标
     * </pre>
     */
    public Builder clearMapXCoordinate() {
      bitField0_ = (bitField0_ & ~0x00000010);
      mapXCoordinate_ = 0;
      onChanged();
      return this;
    }

    // optional int32 mapYCoordinate = 6;
    private int mapYCoordinate_ ;
    /**
     * <code>optional int32 mapYCoordinate = 6;</code>
     *
     * <pre>
     * 物体中心位置地图中的的Y坐标
     * </pre>
     */
    public boolean hasMapYCoordinate() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 mapYCoordinate = 6;</code>
     *
     * <pre>
     * 物体中心位置地图中的的Y坐标
     * </pre>
     */
    public int getMapYCoordinate() {
      return mapYCoordinate_;
    }
    /**
     * <code>optional int32 mapYCoordinate = 6;</code>
     *
     * <pre>
     * 物体中心位置地图中的的Y坐标
     * </pre>
     */
    public Builder setMapYCoordinate(int value) {
      bitField0_ |= 0x00000020;
      mapYCoordinate_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 mapYCoordinate = 6;</code>
     *
     * <pre>
     * 物体中心位置地图中的的Y坐标
     * </pre>
     */
    public Builder clearMapYCoordinate() {
      bitField0_ = (bitField0_ & ~0x00000020);
      mapYCoordinate_ = 0;
      onChanged();
      return this;
    }

    // optional .Direct direct = 7;
    private awt.proto.enums.Direct direct_ = awt.proto.enums.Direct.UP;
    /**
     * <code>optional .Direct direct = 7;</code>
     */
    public boolean hasDirect() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .Direct direct = 7;</code>
     */
    public awt.proto.enums.Direct getDirect() {
      return direct_;
    }
    /**
     * <code>optional .Direct direct = 7;</code>
     */
    public Builder setDirect(awt.proto.enums.Direct value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000040;
      direct_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .Direct direct = 7;</code>
     */
    public Builder clearDirect() {
      bitField0_ = (bitField0_ & ~0x00000040);
      direct_ = awt.proto.enums.Direct.UP;
      onChanged();
      return this;
    }

    // optional bool isMoved = 8;
    private boolean isMoved_ ;
    /**
     * <code>optional bool isMoved = 8;</code>
     *
     * <pre>
     *是否处于移动状态
     * </pre>
     */
    public boolean hasIsMoved() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool isMoved = 8;</code>
     *
     * <pre>
     *是否处于移动状态
     * </pre>
     */
    public boolean getIsMoved() {
      return isMoved_;
    }
    /**
     * <code>optional bool isMoved = 8;</code>
     *
     * <pre>
     *是否处于移动状态
     * </pre>
     */
    public Builder setIsMoved(boolean value) {
      bitField0_ |= 0x00000080;
      isMoved_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool isMoved = 8;</code>
     *
     * <pre>
     *是否处于移动状态
     * </pre>
     */
    public Builder clearIsMoved() {
      bitField0_ = (bitField0_ & ~0x00000080);
      isMoved_ = false;
      onChanged();
      return this;
    }

    // required bool isLive = 9;
    private boolean isLive_ ;
    /**
     * <code>required bool isLive = 9;</code>
     *
     * <pre>
     *是否存活
     * </pre>
     */
    public boolean hasIsLive() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required bool isLive = 9;</code>
     *
     * <pre>
     *是否存活
     * </pre>
     */
    public boolean getIsLive() {
      return isLive_;
    }
    /**
     * <code>required bool isLive = 9;</code>
     *
     * <pre>
     *是否存活
     * </pre>
     */
    public Builder setIsLive(boolean value) {
      bitField0_ |= 0x00000100;
      isLive_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required bool isLive = 9;</code>
     *
     * <pre>
     *是否存活
     * </pre>
     */
    public Builder clearIsLive() {
      bitField0_ = (bitField0_ & ~0x00000100);
      isLive_ = false;
      onChanged();
      return this;
    }

    // optional int32 blood = 10;
    private int blood_ ;
    /**
     * <code>optional int32 blood = 10;</code>
     *
     * <pre>
     *当前血条
     * </pre>
     */
    public boolean hasBlood() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 blood = 10;</code>
     *
     * <pre>
     *当前血条
     * </pre>
     */
    public int getBlood() {
      return blood_;
    }
    /**
     * <code>optional int32 blood = 10;</code>
     *
     * <pre>
     *当前血条
     * </pre>
     */
    public Builder setBlood(int value) {
      bitField0_ |= 0x00000200;
      blood_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 blood = 10;</code>
     *
     * <pre>
     *当前血条
     * </pre>
     */
    public Builder clearBlood() {
      bitField0_ = (bitField0_ & ~0x00000200);
      blood_ = 0;
      onChanged();
      return this;
    }

    // required int32 increaseId = 11;
    private int increaseId_ ;
    /**
     * <code>required int32 increaseId = 11;</code>
     *
     * <pre>
     *自增id
     * </pre>
     */
    public boolean hasIncreaseId() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 increaseId = 11;</code>
     *
     * <pre>
     *自增id
     * </pre>
     */
    public int getIncreaseId() {
      return increaseId_;
    }
    /**
     * <code>required int32 increaseId = 11;</code>
     *
     * <pre>
     *自增id
     * </pre>
     */
    public Builder setIncreaseId(int value) {
      bitField0_ |= 0x00000400;
      increaseId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int32 increaseId = 11;</code>
     *
     * <pre>
     *自增id
     * </pre>
     */
    public Builder clearIncreaseId() {
      bitField0_ = (bitField0_ & ~0x00000400);
      increaseId_ = 0;
      onChanged();
      return this;
    }

    // optional int32 distance = 12;
    private int distance_ ;
    /**
     * <code>optional int32 distance = 12;</code>
     *
     * <pre>
     *已走射程计数器
     * </pre>
     */
    public boolean hasDistance() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 distance = 12;</code>
     *
     * <pre>
     *已走射程计数器
     * </pre>
     */
    public int getDistance() {
      return distance_;
    }
    /**
     * <code>optional int32 distance = 12;</code>
     *
     * <pre>
     *已走射程计数器
     * </pre>
     */
    public Builder setDistance(int value) {
      bitField0_ |= 0x00000800;
      distance_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 distance = 12;</code>
     *
     * <pre>
     *已走射程计数器
     * </pre>
     */
    public Builder clearDistance() {
      bitField0_ = (bitField0_ & ~0x00000800);
      distance_ = 0;
      onChanged();
      return this;
    }

    // optional .Direct canMoveDirect = 13;
    private awt.proto.enums.Direct canMoveDirect_ = awt.proto.enums.Direct.UP;
    /**
     * <code>optional .Direct canMoveDirect = 13;</code>
     *
     * <pre>
     *多个方向
     * </pre>
     */
    public boolean hasCanMoveDirect() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .Direct canMoveDirect = 13;</code>
     *
     * <pre>
     *多个方向
     * </pre>
     */
    public awt.proto.enums.Direct getCanMoveDirect() {
      return canMoveDirect_;
    }
    /**
     * <code>optional .Direct canMoveDirect = 13;</code>
     *
     * <pre>
     *多个方向
     * </pre>
     */
    public Builder setCanMoveDirect(awt.proto.enums.Direct value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00001000;
      canMoveDirect_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .Direct canMoveDirect = 13;</code>
     *
     * <pre>
     *多个方向
     * </pre>
     */
    public Builder clearCanMoveDirect() {
      bitField0_ = (bitField0_ & ~0x00001000);
      canMoveDirect_ = awt.proto.enums.Direct.UP;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:Element)
  }

  static {
    defaultInstance = new Element(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:Element)
}

